{"version":3,"sources":["Components/RecipeSearch.js","Components/Recipe.js","Components/RecipeList.js","Containers/App.js","Components/RecipeDetails.js","Components/Router.js","serviceWorker.js","index.js"],"names":["RecipeSearch","_ref","onSearchChange","recipeName","handleSubmit","_jsx","React","Fragment","children","className","_jsxs","onSubmit","type","name","value","placeholder","onChange","Recipe","id","publisher","title","img_url","source_url","ingredients","src","alt","style","height","length","concat","substring","Link","textDecoration","to","pathname","state","href","target","rel","RecipeList","recipes","error","map","item","index","uuidv4","recipe","label","source","image","url","App","Component","constructor","arguments","e","this","setState","async","preventDefault","resp","fetch","process","data","json","hits","err","console","log","componentDidUpdate","JSON","stringify","localStorage","setItem","componentDidMount","getItem","parse","render","RecipeDetails","props","location","text","Router","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","HashRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA8BeA,MA5BMC,IAId,IAJe,eACpBC,EAAc,WACdC,EAAU,aACVC,GACDH,EACC,OACEI,cAACC,IAAMC,SAAQ,CAAAC,SACbH,cAAA,OAAKI,UAAU,YAAWD,SACxBH,cAAA,OAAKI,UAAU,MAAKD,SAClBH,cAAA,OAAKI,UAAU,mCAAkCD,SAC/CE,eAAA,QAAMC,SAAUP,EAAaI,SAAA,CAC3BH,cAAA,SACEO,KAAK,OACLC,KAAK,aACLC,MAAOX,EACPY,YAAY,oBACZC,SAAUd,EACVO,UAAU,uBAEZJ,cAAA,UAAQI,UAAU,sBAAqBD,SAAC,qBAKjC,E,MC+BNS,MAtDAhB,IAAiE,IAAhE,GAAEiB,EAAE,UAAEC,EAAS,MAAEC,EAAK,QAAEC,EAAO,WAAEC,EAAU,YAAEC,GAAatB,EACxE,OACEI,cAACC,IAAMC,SAAQ,CAAAC,SACbH,cAAA,OAAKI,UAAU,yCAAwCD,SACrDE,eAAA,OAAKD,UAAU,OAAMD,SAAA,CACnBH,cAAA,OACEI,UAAU,eACVe,IAAKH,EACLI,IAAKL,EACLM,MAAO,CAAEC,OAAQ,WAGnBjB,eAAA,OAAKD,UAAU,YAAWD,SAAA,CACxBH,cAAA,MAAII,UAAU,aAAYD,SACvBY,EAAMQ,OAAS,GAAE,GAAAC,OAAMT,GAAK,GAAAS,OAAQT,EAAMU,UAAU,EAAG,IAAG,SAE7DpB,eAAA,KAAGD,UAAU,0BAAyBD,SAAA,CAAC,aAAWW,KAElDd,cAAA,UACEO,KAAK,SACLH,UAAU,8CAA6CD,SAEvDE,eAACqB,IAAI,CACHL,MAAO,CAAEM,eAAgB,QACzBC,GAAI,CACFC,SAAS,kBAADL,OAAoBX,GAC5BiB,MAAO,CACLhB,YACAC,QACAC,UACAC,aACAC,gBAEFf,SAAA,CAED,IAAI,sBAITH,cAAA,KACE+B,KAAMd,EACNb,UAAU,oDACV4B,OAAO,SACPC,IAAI,sBAAqB9B,SAC1B,wBAMQ,E,QCtBN+B,MA3BItC,IAAyB,IAAxB,QAAEuC,EAAO,MAAEC,GAAOxC,EACpC,OACEI,cAACC,IAAMC,SAAQ,CAAAC,SACbH,cAAA,OAAKI,UAAU,iBAAgBD,SAC7BH,cAAA,OAAKI,UAAU,MAAKD,SACjBiC,EACCpC,cAAA,MAAII,UAAU,2BAA0BD,SAAEiC,IACvCD,GAAUA,EAAQE,KAAI,CAACC,EAAMC,IAE5BvC,cAACY,EAAM,CAELC,GAAI2B,cACJzB,MAAOuB,EAAKG,OAAOC,MACnB5B,UAAWwB,EAAKG,OAAOE,OACvB3B,QAASsB,EAAKG,OAAOG,MACrB3B,WAAYqB,EAAKG,OAAOI,IACxB3B,YAAaoB,EAAKG,OAAOvB,aANpBsB,sBAaF,ECnBrB,MAAMM,UAAYC,YAAUC,cAAA,SAAAC,WAAA,KAC1BnB,MAAQ,CACNK,QAAS,GACTrC,WAAY,UACZsC,MAAO,IAgBT,KAEAvC,eAAkBqD,IAChB,MAAMpD,EAAaoD,EAAElB,OAAOvB,MAC5B0C,KAAKC,SAAS,CACZtD,WAAYA,GACZ,EACF,KAEFC,aAAesD,UACbH,EAAEI,iBACF,IACE,MAAM,WAAExD,GAAeqD,KAAKrB,MAC5B,GAAIhC,EAAWyB,OAAS,EAAG,CACzB,MAAMgC,QAAaC,MAAM,mCAADhC,OACa1B,EAAU,YAAA0B,OArCxCiC,WAqCyD,aAAAjC,OAtCxDiC,mCAsC2E,kBAE7EC,QAAaH,EAAKI,OACC,IAArBD,EAAKE,KAAKrC,OACZ4B,KAAKC,SAAS,CACZjB,QAASuB,EAAKE,KACd9D,WAAY,GACZsC,MAAO,KAGTe,KAAKC,SAAS,CACZhB,MAAO,yCACPtC,WAAY,IAGlB,CACF,CAAE,MAAO+D,GACPC,QAAQC,IAAIF,EACd,EACA,CAGFG,qBACE,MAAM7B,EAAU8B,KAAKC,UAAUf,KAAKrB,MAAMK,SAC1CgC,aAAaC,QAAQ,UAAWjC,EAClC,CAGAkC,oBACE,MAAM/B,EAAO6B,aAAaG,QAAQ,WAC5BnC,EAAU8B,KAAKM,MAAMjC,GAC3Ba,KAAKC,SAAS,CAAEjB,QAASA,GAC3B,CAEAqC,SACE,OACExE,cAACC,IAAMC,SAAQ,CAAAC,SACbE,eAAA,OAAAF,SAAA,CACEH,cAAA,UAAQI,UAAU,aAAYD,SAC5BH,cAAA,MAAII,UAAU,aAAYD,SAAC,oBAE7BH,cAACL,EAAY,CACXG,WAAYqD,KAAKrB,MAAMhC,WACvBD,eAAgBsD,KAAKtD,eACrBE,aAAcoD,KAAKpD,eAErBC,cAACkC,EAAU,CAACC,QAASgB,KAAKrB,MAAMK,QAASC,MAAOe,KAAKrB,MAAMM,YAInE,EAGaU,QC5Ff,MAAM2B,UAAsB1B,YAAUC,cAAA,SAAAC,WAAA,KACpCnB,MAAQ,CACNW,OAAQ,GACR,CAaF+B,SACE,MAAM,QACJxD,EAAO,WAEPC,EAAU,MACVF,EAAK,YACLG,GACEiC,KAAKuB,MAAMC,SAAS7C,MAIxB,OAFAgC,QAAQC,IAAI,MAAO7C,GAGjBlB,cAACC,IAAMC,SAAQ,CAAAC,SACbH,cAAA,OAAKI,UAAU,YAAWD,SACxBH,cAAA,OAAKI,UAAU,MAAKD,SAClBE,eAAA,OAAKD,UAAU,+BAA8BD,SAAA,CAC3CH,cAAA,MAAII,UAAU,YAAWD,SAAC,mBAC1BH,cAAA,OAAKI,UAAU,gBAAgBe,IAAKH,EAASI,IAAKL,IAClDV,eAAA,MAAID,UAAU,kCAAiCD,SAAA,CAAC,SAAOY,KACtDG,EAAYmB,KAAKC,GAEdtC,cAAA,MAAmBI,UAAU,kBAAiBD,SAC5CH,cAAA,MAAII,UAAU,kBAAiBD,SAAEmC,EAAKsC,QAD/BpC,iBAMbnC,eAAA,KAAAF,SAAA,CAAG,WAEDH,cAAA,QAAAG,SACEH,cAAA,KACE+B,KAAMd,EACNb,UAAU,aACV4B,OAAO,SACPC,IAAI,sBAAqB9B,SAExBc,SAIPjB,cAAA,UACEO,KAAK,SACLH,UAAU,yCAAwCD,SAElDH,cAAC0B,IAAI,CACHL,MAAO,CAAEM,eAAgB,QACzBC,GAAI,CACFC,SAAS,KACT1B,SACH,sBASf,EAGasE,QChEAI,MAXAA,IAEX7E,cAACC,IAAMC,SAAQ,CAAAC,SACbE,eAACyE,IAAM,CAAA3E,SAAA,CACLH,cAAC+E,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC9C,cAAC+E,IAAK,CAACC,OAAK,EAACC,KAAK,qBAAqBC,UAAWT,SCCtCU,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCXNC,IAASf,OACPxE,cAACwF,IAAU,CAAArF,SACTH,cAAC6E,EAAM,MAETY,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,YAAY,G","file":"static/js/main.eee32fd1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst RecipeSearch = ({\n  onSearchChange,\n  recipeName,\n  handleSubmit,\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-6 col-lg-4\">\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                name=\"recipeName\"\n                value={recipeName}\n                placeholder=\"search your items\"\n                onChange={onSearchChange}\n                className=\"recipeSearch_input\"\n              />\n              <button className=\"recipeSearch_button\">search</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default RecipeSearch;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Recipe = ({ id, publisher, title, img_url, source_url, ingredients }) => {\n  return (\n    <React.Fragment>\n      <div className=\"col-10 mx-auto col-md-6  col-lg-4 my-3\">\n        <div className=\"card\">\n          <img\n            className=\"card-img-top\"\n            src={img_url}\n            alt={title}\n            style={{ height: \"15rem\" }}\n          />\n\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              {title.length < 20 ? `${title}` : `${title.substring(0, 25)}...`}\n            </h5>\n            <p className=\" card-text text-warning\">Publisher:{publisher}</p>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-danger mx-2 text-capitalize\"\n            >\n              <Link\n                style={{ textDecoration: \"none\" }}\n                to={{\n                  pathname: `/recipedetails/${id}`,\n                  state: {\n                    publisher,\n                    title,\n                    img_url,\n                    source_url,\n                    ingredients,\n                  },\n                }}\n              >\n                {\" \"}\n                Recipe Details\n              </Link>\n            </button>\n            <a\n              href={source_url}\n              className=\"btn btn-outline-success mx-2 text-capitalize my-2\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Source url\n            </a>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport Recipe from \"./Recipe\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst RecipeList = ({ recipes, error }) => {\n  return (\n    <React.Fragment>\n      <div className=\"container my-3\">\n        <div className=\"row\">\n          {error ? (\n            <h2 className=\" text-danger text-center\">{error}</h2>\n          ) : (recipes &&recipes.map((item, index) => {\n              return (\n                <Recipe\n                  key={uuidv4()}\n                  id={uuidv4()}\n                  title={item.recipe.label}\n                  publisher={item.recipe.source}\n                  img_url={item.recipe.image}\n                  source_url={item.recipe.url}\n                  ingredients={item.recipe.ingredients}\n                />\n              );\n            })\n          )}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default RecipeList;\n","import React, { Component } from \"react\";\nimport RecipeSearch from \"../Components/RecipeSearch\";\nimport \"./App.css\";\nimport RecipeList from \"../Components/RecipeList\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst APP_ID = process.env.REACT_APP_API_ID;\n\nclass App extends Component {\n  state = {\n    recipes: [],\n    recipeName: \"Chicken\",\n    error: \"\",\n  };\n\n  // componentDidMount = async () => {\n  //   try {\n  //     const api_call = await fetch(\n  //       `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${API_KEY}&from=0&to=30`\n  //     );\n  //     const resp = await api_call.json();\n\n  //     this.setState({\n  //       recipes: resp.hits,\n  //     });\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // };\n\n  onSearchChange = (e) => {\n    const recipeName = e.target.value;\n    this.setState({\n      recipeName: recipeName,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { recipeName } = this.state;\n      if (recipeName.length > 0) {\n        const resp = await fetch(\n          `https://api.edamam.com/search?q=${recipeName}&app_id=${APP_ID}&app_key=${API_KEY}&from=0&to=30`\n        );\n        const data = await resp.json();\n        if (data.hits.length !== 0) {\n          this.setState({\n            recipes: data.hits,\n            recipeName: \"\",\n            error: \"\",\n          });\n        } else {\n          this.setState({\n            error: \"Sorry! Please enter a valid recipeName\",\n            recipeName: \"\",\n          });\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // locally storing the items\n  componentDidUpdate() {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n\n  // grabing the stored items\n  componentDidMount() {\n    const item = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(item);\n    this.setState({ recipes: recipes });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <header className=\"App-header\">\n            <h1 className=\"App-title \">Recipe Search</h1>\n          </header>\n          <RecipeSearch\n            recipeName={this.state.recipeName}\n            onSearchChange={this.onSearchChange}\n            handleSubmit={this.handleSubmit}\n          />\n          <RecipeList recipes={this.state.recipes} error={this.state.error} />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass RecipeDetails extends Component {\n  state = {\n    recipe: [],\n  };\n\n  //   componentDidMount = async ()=>{\n\n  //   const title= this.props.location.state.title\n  //   const resp = await fetch(`https://api.edamam.com/search?q=${recipeName}&app_id=${APP_ID}&app_key=${API_KEY}&from=0&to=30`)\n  //   const data = await resp.json()\n  //   this.setState({\n  //       recipe:data.recipes[0]\n\n  //   })\n\n  // }\n  render() {\n    const {\n      img_url,\n\n      source_url,\n      title,\n      ingredients,\n    } = this.props.location.state;\n\n    console.log(\"ing\", ingredients);\n\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-10 mx-auto col-md-6 my-3\">\n              <h3 className=\"text-info\">Recipe Details</h3>\n              <img className=\"d-block w-100\" src={img_url} alt={title} />\n              <h4 className=\"text_uppercase text-danger my-3\">Title:{title}</h4>\n              {ingredients.map((item) => {\n                return (\n                  <ul key={uuidv4()} className=\"ingredient_list\">\n                    <li className=\"ingredient_text\">{item.text}</li>\n                  </ul>\n                );\n              })}\n\n              <p>\n                Website:\n                <span>\n                  <a\n                    href={source_url}\n                    className=\" mx-4 my-2\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {source_url}\n                  </a>\n                </span>\n              </p>\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-danger text-capitalize\"\n              >\n                <Link\n                  style={{ textDecoration: \"none\" }}\n                  to={{\n                    pathname: `/`,\n                  }}\n                >\n                  go home\n                </Link>\n              </button>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RecipeDetails;\n","import React from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport App from \"../Containers/App\";\nimport RecipeDetails from \"./RecipeDetails\";\n\nconst Router = () => {\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/recipedetails/:id\" component={RecipeDetails} />\n      </Switch>\n    </React.Fragment>\n  );\n};\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { HashRouter } from \"react-router-dom\";\nimport Router from \"./Components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <Router />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}